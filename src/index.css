@import "tailwindcss";

html {
  scroll-behavior: smooth;
}
.testcard {
  --start: 0; /* You can dynamically change this if needed */
  position: relative;
  z-index: 40;
  overflow: hidden;
  transition: border-color 1s ease-in-out, box-shadow 0.5s ease-in-out;
}

.testcard::before {
  position: absolute;
  content: "";
  width: 100%;
  height: 100%;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  border-radius: 12px;
  border: 2px solid transparent;
  background: var(--gradient, conic-gradient(from 0deg, rgba(129, 140, 248, 0.8) 0deg, rgba(99, 102, 241, 0.5) 180deg, rgba(129, 140, 248, 0.8) 360deg)); /* Use default gradient */
  background-attachment: fixed;
  mask: linear-gradient(#0000, #0000),
    conic-gradient(
      from calc((var(--start) - 15) * 1deg),
      #ffffff1f 0deg,
      white,
      #ffffff00 100deg
    );
  mask-composite: intersect;
  mask-clip: padding-box, border-box;
  opacity: 0;
  transition: opacity 0.5s ease, background 0.5s ease;
}

.glow {
  pointer-events: none;
  position: absolute;
  width: 100%;
  height: 100%;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  filter: blur(10px) saturate(200);
}

.testcard:hover::before {
  opacity: 1;
  background: conic-gradient(
    from calc((var(--start) - 15) * 1deg),
    rgba(129, 140, 248, 0.8) 0deg,
    rgba(99, 102, 241, 0.5) 180deg,
    rgba(129, 140, 248, 0.8) 360deg
  );
}
.lanyard-wrapper {
  position: relative;
  z-index: 0;
  width: 100%;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  transform: scale(1);
  transform-origin: center;
}
/* Hero text slider starts */
.slide {
  display: inline-block;
  overflow: hidden; /* Ito importante para "masking" */
  height: 1.1rem; /* Depende sa height ng isang item â€” adjust mo later */
}

.wrapper {
  display: flex;
  flex-direction: column;
  animation: wordSlider 21s infinite cubic-bezier(0.9, 0.01, 0.3, 0.99);
}

.wrapper span {
  height: 2.5rem; /* Pareho dapat sa .slide height */
}


@keyframes wordSlider {
  0% {
    transform: translateY(0.5%);
  }
  12.5% {
    transform: translateY(-12.5%);
  }
  25% {
    transform: translateY(-25%);
  }
  37.5% {
    transform: translateY(-37.5%);
  }
  50% {
    transform: translateY(-50%);
  }
  62.5% {
    transform: translateY(-62.5%);
  }
  75% {
    transform: translateY(-75%);
  }
  87.5% {
    transform: translateY(-87.5%);
  }
}

/* Hero Text slider ends */


.loader {
  animation-duration: 3s;
  animation-name: spin;
}
keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
    border-radius: 50%;
  }
}
.shiny-text {
  color: #b5b5b5a4; /* Adjust this color to change intensity/style */
  background: linear-gradient(
    120deg,
    rgba(255, 255, 255, 0) 40%,
    rgba(255, 255, 255, 0.8) 50%,
    rgba(255, 255, 255, 0) 60%
  );
  background-size: 200% 100%;
  -webkit-background-clip: text;
  background-clip: text;
  display: inline-block;
  animation: shine 5s linear infinite;
}

@keyframes shine {
  0% {
    background-position: 100%;
  }
  100% {
    background-position: -100%;
  }
}

.animate-shine {
  animation-name: shine;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

.text-rotate {
  display: flex;
  flex-wrap: wrap;
  white-space: pre-wrap;
  position: relative;
}

.text-rotate-sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.text-rotate-word {
  display: inline-flex;
}

.text-rotate-lines {
  display: flex;
  flex-direction: column;
  width: 100%;
}

.text-rotate-element {
  display: inline-block;
}

.text-rotate-space {
  white-space: pre;
}

/* imagestack */
.stack-container {
  position: relative;
  perspective: 600px;
}

.card-rotate {
  position: absolute;
  cursor: grab;
}

.card {
  border-radius: 20px;
  border: 2px solid #fff;
  overflow: hidden;
}

.card-image {
  pointer-events: none;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Dock nav */

.dock-outer {
  margin: 0 0.5rem;
  display: flex;
  max-width: 100%;
  align-items: center;
}

.dock-panel {
  position: absolute;
  bottom: 0.5rem;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: flex-end;
  width: fit-content;
  border-radius: 1rem;
  backdrop-filter: blur(5px);
  border: 1px solid gray;
  padding: 0 0.5rem 0.5rem;
  z-index: 999;
  background-color: rgba(6, 1, 16, 0.3);
}


.dock-item {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  outline: none;
}

.dock-icon {
  display: flex;
  align-items: center;
  justify-content: center;
}

.dock-label {
  position: absolute;
  top: -1.5rem;
  left: 50%;
  width: fit-content;
  white-space: pre;
  border-radius: 0.375rem;
  border: 1px solid #222;
  background-color: #060010;
  padding: 0.125rem 0.5rem;
  font-size: 0.75rem;
  color: #fff;
  transform: translateX(-50%);
}

.star-border-container {
  display: inline-block;
  position: relative;
  border-radius: 20px;
  overflow: hidden;
}

.border-gradient-bottom {
  position: absolute;
  width: 300%;
  height: 50%;
  opacity: 0.7;
  bottom: -12px;
  right: -250%;
  border-radius: 50%;
  animation: star-movement-bottom linear infinite alternate;
  z-index: 0;
}

.border-gradient-top {
  position: absolute;
  opacity: 0.7;
  width: 300%;
  height: 50%;
  top: -12px;
  left: -250%;
  border-radius: 50%;
  animation: star-movement-top linear infinite alternate;
  z-index: 0;
}

.inner-content {
  position: relative;
  border: 1px solid #222;
  background: #000;
  color: white;
  font-size: 16px;
  text-align: center;
  padding: 16px 26px;
  border-radius: 20px;
  z-index: 1;
}
/* Star-movement */
.inner-content {
  background-color: #1e1a4d;
  display: flex;
  gap: 0.5rem;
  border: 1px solid #222;
  padding: 10px 20px;
}
@keyframes star-movement-bottom {
  0% {
    transform: translate(0%, 0%);
    opacity: 1;
  }
  100% {
    transform: translate(-100%, 0%);
    opacity: 0;
  }
}

@keyframes star-movement-top {
  0% {
    transform: translate(0%, 0%);
    opacity: 1;
  }
  100% {
    transform: translate(100%, 0%);
    opacity: 0;
  }
}
